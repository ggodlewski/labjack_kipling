0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/share/npm/bin/npm', 'publish' ]
2 info using npm@1.4.4
3 info using node@v0.10.1
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/chrisjohnson/.npm/3a52ce78-.lock
11 verbose tar pack [ '/var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball /var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
13 verbose folder .
14 info prepublish labjack-nodejs@0.0.11
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/chrisjohnson/.npm/1f1177db-tar.lock
17 silly lockFile e2ce17dc-305-0-036834427155554295-tmp-tgz tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
18 verbose lock tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz /Users/chrisjohnson/.npm/e2ce17dc-305-0-036834427155554295-tmp-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile e2ce17dc-305-0-036834427155554295-tmp-tgz tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
22 silly lockFile e2ce17dc-305-0-036834427155554295-tmp-tgz tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
23 verbose tar unpack /var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
24 silly lockFile b0aed4b1-305-0-036834427155554295-package tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package
25 verbose lock tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package /Users/chrisjohnson/.npm/b0aed4b1-305-0-036834427155554295-package.lock
26 silly lockFile e2ce17dc-305-0-036834427155554295-tmp-tgz tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
27 verbose lock tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz /Users/chrisjohnson/.npm/e2ce17dc-305-0-036834427155554295-tmp-tgz.lock
28 silly gunzTarPerm modes [ '755', '644' ]
29 silly gunzTarPerm extractEntry package.json
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry lib/device.js
32 silly gunzTarPerm extractEntry lib/driver.js
33 silly gunzTarPerm extractEntry lib/driverWrapper.js
34 silly gunzTarPerm extractEntry lib/driver_const.js
35 silly gunzTarPerm extractEntry lib/driver_wrapper.js
36 silly gunzTarPerm extractEntry lib/firmware_manager.js
37 silly gunzTarPerm extractEntry lib/json_constants_parser.js
38 silly gunzTarPerm extractEntry lib/labjack_nodejs.js
39 silly gunzTarPerm extractEntry lib/utils.js
40 silly gunzTarPerm extractEntry lib/firmware_versions.json
41 silly lockFile b0aed4b1-305-0-036834427155554295-package tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package
42 silly lockFile b0aed4b1-305-0-036834427155554295-package tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package
43 silly lockFile e2ce17dc-305-0-036834427155554295-tmp-tgz tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
44 silly lockFile e2ce17dc-305-0-036834427155554295-tmp-tgz tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/tmp.tgz
45 verbose tar pack [ '/Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz',
45 verbose tar pack   '/var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package' ]
46 verbose tarball /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
47 verbose folder /var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package
48 silly lockFile b0aed4b1-305-0-036834427155554295-package tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package
49 verbose lock tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package /Users/chrisjohnson/.npm/b0aed4b1-305-0-036834427155554295-package.lock
50 silly lockFile f02dfb1d-abjack-nodejs-0-0-11-package-tgz tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
51 verbose lock tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz /Users/chrisjohnson/.npm/f02dfb1d-abjack-nodejs-0-0-11-package-tgz.lock
52 silly lockFile b0aed4b1-305-0-036834427155554295-package tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package
53 silly lockFile b0aed4b1-305-0-036834427155554295-package tar:///var/folders/vj/73p224w96012gvls7lc0n1140000gn/T/npm-8746--cfSiJYO/1400542803305-0.036834427155554295/package
54 silly lockFile f02dfb1d-abjack-nodejs-0-0-11-package-tgz tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
55 silly lockFile f02dfb1d-abjack-nodejs-0-0-11-package-tgz tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
56 silly lockFile 2346f7e3-pm-labjack-nodejs-0-0-11-package /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package
57 verbose lock /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package /Users/chrisjohnson/.npm/2346f7e3-pm-labjack-nodejs-0-0-11-package.lock
58 silly lockFile 2346f7e3-pm-labjack-nodejs-0-0-11-package /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package
59 silly lockFile 2346f7e3-pm-labjack-nodejs-0-0-11-package /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package
60 verbose tar unpack /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
61 silly lockFile 181aad6a-pm-labjack-nodejs-0-0-11-package tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package
62 verbose lock tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package /Users/chrisjohnson/.npm/181aad6a-pm-labjack-nodejs-0-0-11-package.lock
63 silly lockFile f02dfb1d-abjack-nodejs-0-0-11-package-tgz tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
64 verbose lock tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz /Users/chrisjohnson/.npm/f02dfb1d-abjack-nodejs-0-0-11-package-tgz.lock
65 silly gunzTarPerm modes [ '755', '644' ]
66 silly gunzTarPerm extractEntry package.json
67 silly gunzTarPerm extractEntry README.md
68 silly gunzTarPerm extractEntry lib/device.js
69 silly gunzTarPerm extractEntry lib/driver.js
70 silly gunzTarPerm extractEntry lib/driverWrapper.js
71 silly gunzTarPerm extractEntry lib/driver_const.js
72 silly gunzTarPerm extractEntry lib/driver_wrapper.js
73 silly gunzTarPerm extractEntry lib/firmware_manager.js
74 silly gunzTarPerm extractEntry lib/json_constants_parser.js
75 silly gunzTarPerm extractEntry lib/labjack_nodejs.js
76 silly gunzTarPerm extractEntry lib/utils.js
77 silly gunzTarPerm extractEntry lib/firmware_versions.json
78 silly lockFile 181aad6a-pm-labjack-nodejs-0-0-11-package tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package
79 silly lockFile 181aad6a-pm-labjack-nodejs-0-0-11-package tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package
80 silly lockFile f02dfb1d-abjack-nodejs-0-0-11-package-tgz tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
81 silly lockFile f02dfb1d-abjack-nodejs-0-0-11-package-tgz tar:///Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz
82 verbose chmod /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz 644
83 verbose chown /Users/chrisjohnson/.npm/labjack-nodejs/0.0.11/package.tgz [ 501, 20 ]
84 silly lockFile 3a52ce78- .
85 silly lockFile 3a52ce78- .
86 silly publish { name: 'labjack-nodejs',
86 silly publish   version: '0.0.11',
86 silly publish   author: { name: 'Chris Johnson', url: 'http://labjack.com' },
86 silly publish   contributors: { name: 'Sam Pottinger', url: 'http://gleap.org' },
86 silly publish   main: './lib/labjack_nodejs',
86 silly publish   license: 'GNU GPL v3',
86 silly publish   keywords: [ 'LabJack', 'LJMMM', 'MODBUS', 'T7' ],
86 silly publish   homepage: 'https://github.com/chrisJohn404/LabJack-nodejs',
86 silly publish   repository:
86 silly publish    { type: 'git',
86 silly publish      url: 'https://github.com/chrisJohn404/LabJack-nodejs.git' },
86 silly publish   files: [ 'lib' ],
86 silly publish   dependencies:
86 silly publish    { async: '~0',
86 silly publish      ffi: '~1',
86 silly publish      optimist: '~0',
86 silly publish      ref: '~0',
86 silly publish      rewire: '~1',
86 silly publish      'ljmmm-parse': '~0.1',
86 silly publish      q: '~0' },
86 silly publish   readme: 'LabJack-nodejs\n==============\nUPDATED FOR LJM VERSION 1.03\n\n\nnodejs library for using [LJM library](http://labjack.com/ljm).  Created two different objects that can be imported.  Was created to function much like our labjack python driver for our UD devices. For more information about what each function does please look at the LabJackM.h file that can be downloaded & installed from LabJacks [Software & Driver](http://labjack.com/support/software) page.\n\nCurrently this wrapper only supports our [T7](http://labjack.com/t7) and [T7-Pro](http://labjack.com/t7) Low Cost, High Quality Multifunction USB, Ethernet, 802.11b/g Wifi DAQ devices however [LabJack](http://labjack.com/) plans to release firmware for the [U3](http://labjack.com/u3) and [U6](http://labjack.com/u6) USB DAQ devices as time permits.  \n\n### Device (device.js)\nManages the handle for you & aims to simplify the interface with the LJM driver.\n\nThis driver wrapper was created supporting both synchronous and asynchronous function calls to support both functional and object oriented programing styles.  The general format is shown below:\n```javascript\n//Synchronous Example:\nvar result = exampleFunctionSync(arg1);\n\n//Asynchronous example (requiring function callbacks):\nexampleFunction(\n\targ1,\n\tfunction(err) {\n\t\tconsole.log(\'error\',err);\n\t},\n\tfunction(result) {\n\t\tconsole.log(\'success\',result);\n\t}\n);\n```\n\n### How To Use:\nBefore writing any code you must create a device or driver object:\n\n```javascript\n//Device Object (to control a labjack device)\nvar deviceManager = require(\'device\');\nvar device = new deviceManager.labjack();\n```\n\n\nNow you can use any of the implemented functions by:\n\n```javascript\n//not using callbacks\ndevice.exampleFunctionSync();\n\n//using callbacks\ndevice.exampleFunction(\n\tfunction (err) {\n\t\tconsole.log(\'error\',err);\n\t}, \n\tfunction (result) {\n\t\tconsole.log(\'success\',result);\n\t}\n);\n\n//you can also use other callback handlers\nonError = function(res)\n{\n\tconsole.log(\'error\',res);\n};\nonSuccess = function(res)\n{\n\tconsole.log(\'success\',res);\n};\ndevice.exampleFunction(arg1, arg2, onError, onSuccess);\n```\n\n### Available Functions & what they use:\n#### open(): \nUses LJM_Open and LJM_OpenS\n```javascript\ndevice.openSync(); //opens the first found labjack device, LJM_OpenS("LJM_dtANY","LJM_ctANY","LJM_idANY")\ndevice.openSync("LJM_dtANY", "LJM_ctANY", "LJM_idANY");//Connect to first-found device\ndevice.openSync("LJM_dtT7", "LJM_USB", "470010642");//Connect to T7 w/ serial number 470010642 connected via USB\ndevice.openSync("LJM_dtT7", "LJM_ETHERNET", "470010642");//Connect to T7 w/ serial number 470010642 connected via ETHERNET\ndevice.openSync("LJM_dtT7", "LJM_WIFI", "470010642");//Connect to T7 w/ serial number 470010642 connected via WIFI\ndevice.openSync(7,1,470010642);//Connect to T7 w/ serial number 470010642 connected via USB\n\n//example with callback:\nvar onSuccess = function(result) {\n\t//Code\n}\nvar onError = function(error) {\n\t//Code\n}\n//Connect to first-found device w/ callbacks\ndevice.open(\n\t"LJM_dtANY", \n\t"LJM_ctANY", \n\t"LJM_idANY",\n\tonError, \n\tonSuccess\n);\n```\n\n\n#### getHandleInfo(): \nUses LJM_GetHandleInfo\n```javascript\ndevInfo = device.getHandleInfoSync();//return the handle info in a dict:\n//devInfo is a dictionary with attributes: deviceType, connectionType, serialNumber, ipAddress, port, maxBytesPerMB\ndevInfo.deviceType;//The device type (7 for T7\'s)\ndevInfo.connectionType;//The connection type, 1(USB), 3(ETHERNET), 4(WIFI)\ndevInfo.serialNumber;//The serial number of the open device\ndevInfo.ipAddress;//IP address string for the open device\ndevInfo.port;\ndevInfo.maxBytesPerMB;\n```\n#### readRaw(data array): \nUses  LJM_ReadRaw\n#### read(address \'number\' or \'string\'): \nUses  LJM_eReadAddress, LJM_eReadName, LJM_eReadNameString, and LJM_eReadAddressString.\n```javascript\nvalue = device.readSync("AIN0");//returns the AIN0 channel reading\nvalue = device.readSync(0);//returns the AIN0 channel reading\nvalue = device.readSync(\'DEVICE_NAME_DEFAULT\');//returns the name of the device\n\n//example with callback:\nvalue = device.read(\n\t"AIN0",\n\tfunction (res) {\n\t\tconsole.log(\'err:\',res);\n\t},\n\tfunction (res) {\n\t\tconsole.log(\'ain0Reading:\',res);\n\t}\n);\n```\n\n\n#### readMany(addresses \'number\' or \'string\' array): \nUses  LJM_eReadAddresses and LJM_eReadNames\n```javascript\nvalue = device.readManySync(["AIN0","AIN1"]);//returns an array with AIN0 and AIN1 readings\nvalue = device.readManySync([0,1]);//returns an array with AIN0 and AIN1 readings\n```\n\n#### writeRaw(data array): \nUses  LJM_WriteRaw\n#### write(address \'number\' or \'string\', value \'number\' or \'string\'): \nUses  LJM_eWriteAddress, LJM_eWriteName, LJM_eWriteAddressString, and LJM_eWriteNameString\n```javascript\nerrRes = device.writeSync("DAC0",1.0);//instructs the T7 to set DAC0 analog output to 1V, returns an error number\nerrRes = device.writeSync(1000,1.0);//instructs the T7 to set DAC0 analog output to 1V, returns an error number\nvalue = device.writeSync(\'DEVICE_NAME_DEFAULT\',\'NewDeviceName\');//writes a new device name to the device\n\n//example with callback:\nerrRes = device.write(\n\t"DAC0",\n\t1.0,\n\tfunction (res) {\n\t\tconsole.log(\'err:\',res);\n\t}, \n\tfunction (res) {\n\t\tconsole.log(\'SUCCESS\');\n\t});\n```\n\n#### writeMany(addresses array \'number\' or \'string\', values array \'number\' or \'string\')\n#### writeMany(dict array {addr,vals}): \nUses  LJM_eWriteAddresses LJM_eWriteNames\n```javascript\n//Two Arrays\n//using two separate array\'s, one for addresses to write to and one of values\nerrRes = device.writeManySync(["DAC0","DAC1"],[1.0,2.0]);\nerrRes = device.writeManySync([1000,1002],[1.0,2.0]);\n```\n\n#### close(): \nUses  LJM_Close\n```javascript\nerrRes = device.closeSync();\n\n//example with callback:\ndevice.close(\n\tfunction(res){\n\t\tconsole.log(\'Err:\',res);\n\t},\n\tfunction(res){\n\t\tconsole.log(\'closed!\');\n\t});\n```\n\nAll Relevant "libLabJackM" Functions:\n- [x] LJM_Open\n- [x] LJM_OpenS\n- [x] LJM_GetHandleInfo\n- [x] LJM_ResetConnection\n- [x] LJM_Close\n- [x] LJM_WriteRaw (NOT TESTED)\n- [x] LJM_ReadRaw (NOT TESTED)\n- [x] LJM_eWriteAddress\n- [x] LJM_eReadAddress\n- [x] LJM_eWriteName\n- [x] LJM_eReadName\n- [x] LJM_eReadAddresses\n- [x] LJM_eReadNames\n- [x] LJM_eWriteAddresses\n- [x] LJM_eWriteNames\n- [x] LJM_eAddresses\n- [x] LJM_eNames\n- [ ] LJM_eStreamStart\n- [ ] LJM_eStreamRead\n- [ ] LJM_eStreamStop\n- [x] LJM_eReadString\n- [x] LJM_eWriteString\n\n\n### LJM_Driver (driver.js)\nJavaScript Wrapper for the rest of the LJM_Driver functions.\n\n### How To Use:\nBefore writing any code you must create a driver object:\n\n```javascript\n//Driver Object (to gain access to more general driver related features)\nvar driverManager = require(\'driver\');\nvar ljmDriver = new driverManager.ljmDriver();\n```\n\n### Available Functions & what they use:\n#### listAll(deviceType \'number\' or \'string\', connectionType \'number\' or \'string\'):\nUses LJM_ListAll and LJM_ListAllS\n\n```javascript\nfoundDevices = ljmDriver.listAllSync();//find all T7\'s\nfoundDevices = ljmDriver.listAllSync("LJM_dtANY","LJM_ctANY");//find all T7\'s\nfoundDevices = ljmDriver.listAllSync("LJM_dtT7","LJM_ctUSB");//find all T7\'s connected via USB\nfoundDevices = ljmDriver.listAllSync(7,1);//find all T7\'s connected via USB\n\n\n//using callback functions\nljmDriver.listAll(\n\tfunction (err) {\n\t\tconsole.log(\'Error\',err);\n\t}, \n\tfunction (foundDevices) {\n\t\tconsole.log(\'Devices Found:\');\n\t\tconsole.log(foundDevices);\n\t});\n\n//Both methods return an array of dict\'s, ex:\n//foundDevices.length, number of devices found\n//foundDevices[0].deviceType (number)\n//foundDevices[0].connectionType (number)\n//foundDevices[0].serialNumber (number)\n//foundDevices[0].ipAddress (string)\n```\n\n#### errToStr(errorNumber): \nUses  LJM_ErrorToString, converts an error number to a human readable string-error.  The errors can be found in the ljm_constants.json file.\n```javascript\nconsole.log(ljmDriver.errToStrSync(0));//returns the string "Num 0, LJ_SUCCESS"\nconsole.log(ljmDriver.errToStrSync(200));//returns the string "Num 200, LJME_WARNINGS_BEGIN"\nconsole.log(ljmDriver.errToStrSync(1268));//returns the string "Num 1268, LJME_INVALID_INDEX"\n```\n\n#### loadConstants(): \nUses  LJM_LoadConstants\n#### closeAll(): \nUses  LJM_CloseAll\n#### readLibrary(\'string\' parameter): \nUses  LJM_ReadLibraryConfigS, helpful for using LJM\'s logging features\n#### readLibraryS(\'string\' parameter): \nUses  LJM_ReadLibraryConfigStringS, helpful for using LJM\'s logging features\n#### writeLibrary(\'string\' parameter, value either \'number\' or \'string\'): \nUses  LJM_WriteLibraryConfigS and LJM_WriteLibraryConfigStringS, helpful for using LJM\'s logging features\n#### logS(\'number\' logLevel, \'string\' message to log): \nUses  LJM_Log\n#### resetLog(): \nUses  LJM_ResetLog\n\nAll Relevant "libLabJackM" Functions:\n- [ ] LJM_AddressesToMBFB\n- [ ] LJM_MBFBComm\n- [ ] LJM_UpdateValues\n- [ ] LJM_NamesToAddresses\n- [ ] LJM_AddressesToTypes\n- [ ] LJM_AddressToType\n- [x] LJM_ListAll\n- [x] LJM_ListAllS\n- [x] LJM_ErrorToString\n- [x] LJM_LoadConstants\n- [x] LJM_CloseAll\n- [x] LJM_WriteLibraryConfigS\n- [x] LJM_WriteLibraryConfigStringS\n- [x] LJM_ReadLibraryConfigS\n- [x] LJM_ReadLibraryConfigStringS\n- [x] LJM_Log\n- [x] LJM_ResetLog\n',
86 silly publish   readmeFilename: 'README.md',
86 silly publish   description: 'LabJack-nodejs ============== UPDATED FOR LJM VERSION 1.03',
86 silly publish   bugs: { url: 'https://github.com/chrisJohn404/LabJack-nodejs/issues' },
86 silly publish   _id: 'labjack-nodejs@0.0.11',
86 silly publish   dist: { shasum: '9706a359b679bc3628b8781b788fc942d6acbe82' },
86 silly publish   _from: '.' }
87 verbose url raw labjack-nodejs
88 verbose url resolving [ 'https://registry.npmjs.org/', './labjack-nodejs' ]
89 verbose url resolved https://registry.npmjs.org/labjack-nodejs
90 info trying registry request attempt 1 at 17:40:03
91 http PUT https://registry.npmjs.org/labjack-nodejs
92 http 403 https://registry.npmjs.org/labjack-nodejs
93 error publish Failed PUT 403
94 error Error: forbidden cannot modify pre-existing version: 0.0.11
94 error old={"name":"labjack-nodejs","version":"0.0.11","author":{"name":"Chris Johnson","url":"http://labjack.com"},"contributors":{"name":"Sam Pottinger","url":"http://gleap.org"},"main":"./lib/labjack_nodejs","license":"GNU GPL v3","keywords":["LabJack","LJMMM","MODBUS","T7"],"homepage":"https://github.com/chrisJohn404/LabJack-nodejs","repository":{"type":"git","url":"https://github.com/chrisJohn404/LabJack-nodejs.git"},"files":["lib"],"dependencies":{"async":"~0","ffi":"~1","optimist":"~0","ref":"~0","rewire":"~1","ljmmm-parse":"~0.1","q":"~0"},"description":"LabJack-nodejs ============== UPDATED FOR LJM VERSION 1.03","bugs":{"url":"https://github.com/chrisJohn404/LabJack-nodejs/issues"},"_id":"labjack-nodejs@0.0.11","dist":{"shasum":"7ae384e5ccf80d50d28377ae97104534ef434c28","tarball":"http://registry.npmjs.org/labjack-nodejs/-/labjack-nodejs-0.0.11.tgz"},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"chrissjohnson4","email":"chris.s.johnson4@gmail.com"},"maintainers":[{"name":"chrissjohnson4","email":"chris.s.johnson4@gmail.com"}]}
94 error new={"name":"labjack-nodejs","version":"0.0.11","author":{"name":"Chris Johnson","url":"http://labjack.com"},"contributors":{"name":"Sam Pottinger","url":"http://gleap.org"},"main":"./lib/labjack_nodejs","license":"GNU GPL v3","keywords":["LabJack","LJMMM","MODBUS","T7"],"homepage":"https://github.com/chrisJohn404/LabJack-nodejs","repository":{"type":"git","url":"https://github.com/chrisJohn404/LabJack-nodejs.git"},"files":["lib"],"dependencies":{"async":"~0","ffi":"~1","optimist":"~0","ref":"~0","rewire":"~1","ljmmm-parse":"~0.1","q":"~0"},"readme":"LabJack-nodejs\u000a==============\u000aUPDATED FOR LJM VERSION 1.03\u000a\u000a\u000anodejs library for using [LJM library](http://labjack.com/ljm).  Created two different objects that can be imported.  Was created to function much like our labjack python driver for our UD devices. For more information about what each function does please look at the LabJackM.h file that can be downloaded & installed from LabJacks [Software & Driver](http://labjack.com/support/software) page.\u000a\u000aCurrently this wrapper only supports our [T7](http://labjack.com/t7) and [T7-Pro](http://labjack.com/t7) Low Cost, High Quality Multifunction USB, Ethernet, 802.11b/g Wifi DAQ devices however [LabJack](http://labjack.com/) plans to release firmware for the [U3](http://labjack.com/u3) and [U6](http://labjack.com/u6) USB DAQ devices as time permits.  \u000a\u000a### Device (device.js)\u000aManages the handle for you & aims to simplify the interface with the LJM driver.\u000a\u000aThis driver wrapper was created supporting both synchronous and asynchronous function calls to support both functional and object oriented programing styles.  The general format is shown below:\u000a```javascript\u000a//Synchronous Example:\u000avar result = exampleFunctionSync(arg1);\u000a\u000a//Asynchronous example (requiring function callbacks):\u000aexampleFunction(\u000a\u0009arg1,\u000a\u0009function(err) {\u000a\u0009\u0009console.log('error',err);\u000a\u0009},\u000a\u0009function(result) {\u000a\u0009\u0009console.log('success',result);\u000a\u0009}\u000a);\u000a```\u000a\u000a### How To Use:\u000aBefore writing any code you must create a device or driver object:\u000a\u000a```javascript\u000a//Device Object (to control a labjack device)\u000avar deviceManager = require('device');\u000avar device = new deviceManager.labjack();\u000a```\u000a\u000a\u000aNow you can use any of the implemented functions by:\u000a\u000a```javascript\u000a//not using callbacks\u000adevice.exampleFunctionSync();\u000a\u000a//using callbacks\u000adevice.exampleFunction(\u000a\u0009function (err) {\u000a\u0009\u0009console.log('error',err);\u000a\u0009}, \u000a\u0009function (result) {\u000a\u0009\u0009console.log('success',result);\u000a\u0009}\u000a);\u000a\u000a//you can also use other callback handlers\u000aonError = function(res)\u000a{\u000a\u0009console.log('error',res);\u000a};\u000aonSuccess = function(res)\u000a{\u000a\u0009console.log('success',res);\u000a};\u000adevice.exampleFunction(arg1, arg2, onError, onSuccess);\u000a```\u000a\u000a### Available Functions & what they use:\u000a#### open(): \u000aUses LJM_Open and LJM_OpenS\u000a```javascript\u000adevice.openSync(); //opens the first found labjack device, LJM_OpenS(\"LJM_dtANY\",\"LJM_ctANY\",\"LJM_idANY\")\u000adevice.openSync(\"LJM_dtANY\", \"LJM_ctANY\", \"LJM_idANY\");//Connect to first-found device\u000adevice.openSync(\"LJM_dtT7\", \"LJM_USB\", \"470010642\");//Connect to T7 w/ serial number 470010642 connected via USB\u000adevice.openSync(\"LJM_dtT7\", \"LJM_ETHERNET\", \"470010642\");//Connect to T7 w/ serial number 470010642 connected via ETHERNET\u000adevice.openSync(\"LJM_dtT7\", \"LJM_WIFI\", \"470010642\");//Connect to T7 w/ serial number 470010642 connected via WIFI\u000adevice.openSync(7,1,470010642);//Connect to T7 w/ serial number 470010642 connected via USB\u000a\u000a//example with callback:\u000avar onSuccess = function(result) {\u000a\u0009//Code\u000a}\u000avar onError = function(error) {\u000a\u0009//Code\u000a}\u000a//Connect to first-found device w/ callbacks\u000adevice.open(\u000a\u0009\"LJM_dtANY\", \u000a\u0009\"LJM_ctANY\", \u000a\u0009\"LJM_idANY\",\u000a\u0009onError, \u000a\u0009onSuccess\u000a);\u000a```\u000a\u000a\u000a#### getHandleInfo(): \u000aUses LJM_GetHandleInfo\u000a```javascript\u000adevInfo = device.getHandleInfoSync();//return the handle info in a dict:\u000a//devInfo is a dictionary with attributes: deviceType, connectionType, serialNumber, ipAddress, port, maxBytesPerMB\u000adevInfo.deviceType;//The device type (7 for T7's)\u000adevInfo.connectionType;//The connection type, 1(USB), 3(ETHERNET), 4(WIFI)\u000adevInfo.serialNumber;//The serial number of the open device\u000adevInfo.ipAddress;//IP address string for the open device\u000adevInfo.port;\u000adevInfo.maxBytesPerMB;\u000a```\u000a#### readRaw(data array): \u000aUses  LJM_ReadRaw\u000a#### read(address 'number' or 'string'): \u000aUses  LJM_eReadAddress, LJM_eReadName, LJM_eReadNameString, and LJM_eReadAddressString.\u000a```javascript\u000avalue = device.readSync(\"AIN0\");//returns the AIN0 channel reading\u000avalue = device.readSync(0);//returns the AIN0 channel reading\u000avalue = device.readSync('DEVICE_NAME_DEFAULT');//returns the name of the device\u000a\u000a//example with callback:\u000avalue = device.read(\u000a\u0009\"AIN0\",\u000a\u0009function (res) {\u000a\u0009\u0009console.log('err:',res);\u000a\u0009},\u000a\u0009function (res) {\u000a\u0009\u0009console.log('ain0Reading:',res);\u000a\u0009}\u000a);\u000a```\u000a\u000a\u000a#### readMany(addresses 'number' or 'string' array): \u000aUses  LJM_eReadAddresses and LJM_eReadNames\u000a```javascript\u000avalue = device.readManySync([\"AIN0\",\"AIN1\"]);//returns an array with AIN0 and AIN1 readings\u000avalue = device.readManySync([0,1]);//returns an array with AIN0 and AIN1 readings\u000a```\u000a\u000a#### writeRaw(data array): \u000aUses  LJM_WriteRaw\u000a#### write(address 'number' or 'string', value 'number' or 'string'): \u000aUses  LJM_eWriteAddress, LJM_eWriteName, LJM_eWriteAddressString, and LJM_eWriteNameString\u000a```javascript\u000aerrRes = device.writeSync(\"DAC0\",1.0);//instructs the T7 to set DAC0 analog output to 1V, returns an error number\u000aerrRes = device.writeSync(1000,1.0);//instructs the T7 to set DAC0 analog output to 1V, returns an error number\u000avalue = device.writeSync('DEVICE_NAME_DEFAULT','NewDeviceName');//writes a new device name to the device\u000a\u000a//example with callback:\u000aerrRes = device.write(\u000a\u0009\"DAC0\",\u000a\u00091.0,\u000a\u0009function (res) {\u000a\u0009\u0009console.log('err:',res);\u000a\u0009}, \u000a\u0009function (res) {\u000a\u0009\u0009console.log('SUCCESS');\u000a\u0009});\u000a```\u000a\u000a#### writeMany(addresses array 'number' or 'string', values array 'number' or 'string')\u000a#### writeMany(dict array {addr,vals}): \u000aUses  LJM_eWriteAddresses LJM_eWriteNames\u000a```javascript\u000a//Two Arrays\u000a//using two separate array's, one for addresses to write to and one of values\u000aerrRes = device.writeManySync([\"DAC0\",\"DAC1\"],[1.0,2.0]);\u000aerrRes = device.writeManySync([1000,1002],[1.0,2.0]);\u000a```\u000a\u000a#### close(): \u000aUses  LJM_Close\u000a```javascript\u000aerrRes = device.closeSync();\u000a\u000a//example with callback:\u000adevice.close(\u000a\u0009function(res){\u000a\u0009\u0009console.log('Err:',res);\u000a\u0009},\u000a\u0009function(res){\u000a\u0009\u0009console.log('closed!');\u000a\u0009});\u000a```\u000a\u000aAll Relevant \"libLabJackM\" Functions:\u000a- [x] LJM_Open\u000a- [x] LJM_OpenS\u000a- [x] LJM_GetHandleInfo\u000a- [x] LJM_ResetConnection\u000a- [x] LJM_Close\u000a- [x] LJM_WriteRaw (NOT TESTED)\u000a- [x] LJM_ReadRaw (NOT TESTED)\u000a- [x] LJM_eWriteAddress\u000a- [x] LJM_eReadAddress\u000a- [x] LJM_eWriteName\u000a- [x] LJM_eReadName\u000a- [x] LJM_eReadAddresses\u000a- [x] LJM_eReadNames\u000a- [x] LJM_eWriteAddresses\u000a- [x] LJM_eWriteNames\u000a- [x] LJM_eAddresses\u000a- [x] LJM_eNames\u000a- [ ] LJM_eStreamStart\u000a- [ ] LJM_eStreamRead\u000a- [ ] LJM_eStreamStop\u000a- [x] LJM_eReadString\u000a- [x] LJM_eWriteString\u000a\u000a\u000a### LJM_Driver (driver.js)\u000aJavaScript Wrapper for the rest of the LJM_Driver functions.\u000a\u000a### How To Use:\u000aBefore writing any code you must create a driver object:\u000a\u000a```javascript\u000a//Driver Object (to gain access to more general driver related features)\u000avar driverManager = require('driver');\u000avar ljmDriver = new driverManager.ljmDriver();\u000a```\u000a\u000a### Available Functions & what they use:\u000a#### listAll(deviceType 'number' or 'string', connectionType 'number' or 'string'):\u000aUses LJM_ListAll and LJM_ListAllS\u000a\u000a```javascript\u000afoundDevices = ljmDriver.listAllSync();//find all T7's\u000afoundDevices = ljmDriver.listAllSync(\"LJM_dtANY\",\"LJM_ctANY\");//find all T7's\u000afoundDevices = ljmDriver.listAllSync(\"LJM_dtT7\",\"LJM_ctUSB\");//find all T7's connected via USB\u000afoundDevices = ljmDriver.listAllSync(7,1);//find all T7's connected via USB\u000a\u000a\u000a//using callback functions\u000aljmDriver.listAll(\u000a\u0009function (err) {\u000a\u0009\u0009console.log('Error',err);\u000a\u0009}, \u000a\u0009function (foundDevices) {\u000a\u0009\u0009console.log('Devices Found:');\u000a\u0009\u0009console.log(foundDevices);\u000a\u0009});\u000a\u000a//Both methods return an array of dict's, ex:\u000a//foundDevices.length, number of devices found\u000a//foundDevices[0].deviceType (number)\u000a//foundDevices[0].connectionType (number)\u000a//foundDevices[0].serialNumber (number)\u000a//foundDevices[0].ipAddress (string)\u000a```\u000a\u000a#### errToStr(errorNumber): \u000aUses  LJM_ErrorToString, converts an error number to a human readable string-error.  The errors can be found in the ljm_constants.json file.\u000a```javascript\u000aconsole.log(ljmDriver.errToStrSync(0));//returns the string \"Num 0, LJ_SUCCESS\"\u000aconsole.log(ljmDriver.errToStrSync(200));//returns the string \"Num 200, LJME_WARNINGS_BEGIN\"\u000aconsole.log(ljmDriver.errToStrSync(1268));//returns the string \"Num 1268, LJME_INVALID_INDEX\"\u000a```\u000a\u000a#### loadConstants(): \u000aUses  LJM_LoadConstants\u000a#### closeAll(): \u000aUses  LJM_CloseAll\u000a#### readLibrary('string' parameter): \u000aUses  LJM_ReadLibraryConfigS, helpful for using LJM's logging features\u000a#### readLibraryS('string' parameter): \u000aUses  LJM_ReadLibraryConfigStringS, helpful for using LJM's logging features\u000a#### writeLibrary('string' parameter, value either 'number' or 'string'): \u000aUses  LJM_WriteLibraryConfigS and LJM_WriteLibraryConfigStringS, helpful for using LJM's logging features\u000a#### logS('number' logLevel, 'string' message to log): \u000aUses  LJM_Log\u000a#### resetLog(): \u000aUses  LJM_ResetLog\u000a\u000aAll Relevant \"libLabJackM\" Functions:\u000a- [ ] LJM_AddressesToMBFB\u000a- [ ] LJM_MBFBComm\u000a- [ ] LJM_UpdateValues\u000a- [ ] LJM_NamesToAddresses\u000a- [ ] LJM_AddressesToTypes\u000a- [ ] LJM_AddressToType\u000a- [x] LJM_ListAll\u000a- [x] LJM_ListAllS\u000a- [x] LJM_ErrorToString\u000a- [x] LJM_LoadConstants\u000a- [x] LJM_CloseAll\u000a- [x] LJM_WriteLibraryConfigS\u000a- [x] LJM_WriteLibraryConfigStringS\u000a- [x] LJM_ReadLibraryConfigS\u000a- [x] LJM_ReadLibraryConfigStringS\u000a- [x] LJM_Log\u000a- [x] LJM_ResetLog\u000a","readmeFilename":"README.md","description":"LabJack-nodejs ============== UPDATED FOR LJM VERSION 1.03","bugs":{"url":"https://github.com/chrisJohn404/LabJack-nodejs/issues"},"_id":"labjack-nodejs@0.0.11","dist":{"shasum":"9706a359b679bc3628b8781b788fc942d6acbe82","tarball":"http://registry.npmjs.org/labjack-nodejs/-/labjack-nodejs-0.0.11.tgz"},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"chrissjohnson4","email":"chris.s.johnson4@gmail.com"},"maintainers":[{"name":"chrissjohnson4","email":"chris.s.johnson4@gmail.com"}]}: labjack-nodejs
94 error     at RegClient.<anonymous> (/usr/local/share/npm/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:237:14)
94 error     at Request.self.callback (/usr/local/share/npm/lib/node_modules/npm/node_modules/request/request.js:123:22)
94 error     at Request.EventEmitter.emit (events.js:98:17)
94 error     at Request.<anonymous> (/usr/local/share/npm/lib/node_modules/npm/node_modules/request/request.js:893:14)
94 error     at Request.EventEmitter.emit (events.js:117:20)
94 error     at IncomingMessage.<anonymous> (/usr/local/share/npm/lib/node_modules/npm/node_modules/request/request.js:844:12)
94 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
94 error     at _stream_readable.js:872:14
94 error     at process._tickCallback (node.js:415:13)
95 error If you need help, you may report this *entire* log,
95 error including the npm and node versions, at:
95 error     <http://github.com/npm/npm/issues>
96 error System Darwin 12.5.0
97 error command "node" "/usr/local/share/npm/bin/npm" "publish"
98 error cwd /Users/chrisjohnson/Dropbox/git/LabJack/LabJack-nodejs
99 error node -v v0.10.1
100 error npm -v 1.4.4
101 verbose exit [ 1, true ]
